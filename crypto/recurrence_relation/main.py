from random import randrange
from Crypto.Util.number import isPrime, bytes_to_long, long_to_bytes
from math import gcd, isqrt
import numpy as np

e = 65537
N = 60801945753176569287358574402902647982280914401578295706503608058688741015666325052104040988022127511746093671490800868635550289866192849994575744556775038299059651769599895619208686230834811331181216402362257649103621300464645505295478332584334455886452275274837905175903808768895249267191608517684776071886908155110537610315265244915684802738631911596456456307522383209637007330657332487200829103539921544747161264544195459060960222221
cipher = 15067916960892071625013197893312882422713348324348289762655189240591005240989488429628832872093554920677548926895066492385093795515843865339389241462689760510599941581646373282332383630534998952754164700068400650310439107192761971536314896164983889575707677995146302345674559772261577346721588651662924241912730203281566410936569102099972938843093802348927478169876641876846278850775190583435743646804242979111832927829318853092225618510

# e = 65537
# N = 90912987036500356644552520168317638712114866356159569343376900092575094705575735738710080931399731306194769029949488780142659455673971575062088967367050039800856964552179057477865541349164728183310041780142766933750626054124553438022316563665530563895225828239010884145242102768619196598819904814768329976791275520128982884176672573113009046778585309493983357946698176989199993445329846776181901966425347008166000127580699030669454630119
# cipher = 85562993718296448542788038331599955635731081028512099832434090348195941396307542746336797389990183516067100266576222224875619636229617687714867776330237690060711275309810774180879735793514058177468036370027097824211816635303407008018112522364509171745809870856027344657303775758987867942613535568619040508276022527850287379969141803442416486983419044699169322027122148754946969954728272502265956288092383227478631561555464520792929238956

import gmpy2  # pip install gmpy2

def fermat_factors(n):
    assert n % 2 != 0
    x = gmpy2.isqrt(n)
    y2 = x**2 - n
    while not gmpy2.is_square(y2):
        x += 1
        y2 = x**2 - n
    factor1 = x + gmpy2.isqrt(y2)  # a = x + y
    factor2 = x - gmpy2.isqrt(y2)  # b = x - y
    return int(factor1), int(factor2)

M = np.array([
    [
        26863810024485359386146727202142923967616609318986952340123175997617981700247881689338369654483356564191827856161443356312976673642210350324634850410377680367334151172899169723197082763985615764450078474174626,
        43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875
    ],
    [
        43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875,
        70330367711422815821835254877183549770181269836358732742604905087154537118196933579742249494562611733487750449241765991088186363265450223647106012053374121273867339111198139373125598767690091902245245323403501
    ]
])


alpha = M[0, 0]
beta = M[0, 1]
gamma = M[1, 1]


# A = alpha * beta
# B = alpha * gamma + beta ** 2
# C = beta * gamma

# a = 3215557768
# b = 3466032583

# p = alpha * a + beta * b
# q = beta * a + gamma * b

x, y = fermat_factors(N * beta * gamma);

if x % beta == 0:
    x //= beta
    y //= gamma
else:
    x //= gamma
    y //= beta

print(x, y)
assert x * y == N

phiN = (x - 1) * (y - 1)
d = pow(e, -1, phiN)

print(long_to_bytes(pow(cipher, d, N)).decode())

# print(p / q)
# print(alpha / beta)

# print(alpha * gamma - beta ** 2);

# X = A

# B2 = B ** 2
# AC = 4 * A * C
# AN = 4 * A * N

# print(AN);

# P = B2 - AC

# print(P)

# b = 3466032583;

# # D = Y ** 2 - 4 * X * Z
# D = b ** 2 + AN

# d = isqrt(D)
# assert d * d == D;

# print(b - d)
# print(b + d)
# print(2 * beta * p);

# # print(D)
# # print(d)

# sol = []

# X2 = X * 2;
# Y = B * b

# if (-Y + d) % X2 == 0:
#     sol.append((-Y + d) // X2);
# if (-Y - d) % X2 == 0:
#     sol.append((-Y - d) // X2);

# print(sol)
