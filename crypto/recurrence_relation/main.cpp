/*
 * @uni_kakurenbo
 * https://github.com/uni-kakurenbo/competitive-programming-workspace
 *
 * CC0 1.0  http://creativecommons.org/publicdomain/zero/1.0/deed.ja
 */
/* #language C++ 23 GCC */
// #define DEBUGGER_ENABLED

#include <boost/multiprecision/cpp_int.hpp>
#include "template/standard.hpp"

void solve();

signed main() {
    debug(__cplusplus);
    int $ = 1;
    // std::cin >> $;
    for(int _ = 0; _ < $; ++_) {
        debug_("Case: #" + std::to_string(_));
        solve();
    }
    return 0;
}

#include "template/warnings.hpp"
namespace mp = boost::multiprecision;
using mp::cpp_int;

void solve() {
    cpp_int e("65537");
    cpp_int N("60801945753176569287358574402902647982280914401578295706503608058688741015666325052104040988022127511746093671490800868635550289866192849994575744556775038299059651769599895619208686230834811331181216402362257649103621300464645505295478332584334455886452275274837905175903808768895249267191608517684776071886908155110537610315265244915684802738631911596456456307522383209637007330657332487200829103539921544747161264544195459060960222221");
    cpp_int cipher("15067916960892071625013197893312882422713348324348289762655189240591005240989488429628832872093554920677548926895066492385093795515843865339389241462689760510599941581646373282332383630534998952754164700068400650310439107192761971536314896164983889575707677995146302345674559772261577346721588651662924241912730203281566410936569102099972938843093802348927478169876641876846278850775190583435743646804242979111832927829318853092225618510");

    // cpp_int N("90912987036500356644552520168317638712114866356159569343376900092575094705575735738710080931399731306194769029949488780142659455673971575062088967367050039800856964552179057477865541349164728183310041780142766933750626054124553438022316563665530563895225828239010884145242102768619196598819904814768329976791275520128982884176672573113009046778585309493983357946698176989199993445329846776181901966425347008166000127580699030669454630119");
    // cpp_int cipher("85562993718296448542788038331599955635731081028512099832434090348195941396307542746336797389990183516067100266576222224875619636229617687714867776330237690060711275309810774180879735793514058177468036370027097824211816635303407008018112522364509171745809870856027344657303775758987867942613535568619040508276022527850287379969141803442416486983419044699169322027122148754946969954728272502265956288092383227478631561555464520792929238956");

    uni::matrix<mp::cpp_int> m = { { 0, 1 }, { 1, 1 } };
    m = m.pow(1000);

    auto alpha = m(0, 0);
    auto beta = m(0, 1);
    auto gamma = m(1, 1);

    // print(alpha, beta, gamma);
    // return;

    auto A = alpha * beta;
    auto B = alpha * gamma + beta * beta;
    auto C = beta * gamma;

    auto X = A;
    auto X2 = X * 2;

    auto B2 = B * B;
    auto AC = 4 * A * C;
    auto AN = 4 * A * N;

    auto P = B2 - AC;

    // print(AN);
    // return;

    print(A, B, C);
    print(X, X2);
    print(B2, AC, AN);
    print(P);
    print.flush();
    // return;

    cpp_int x = 0;
    while(true) {
        // x = 3466032583;
        x += 1;
        if(x % 10000 == 0) {
            print(x).flush();
        }

        auto D = x * x + AN;

        auto d = mp::sqrt(D);
        print.flush();

        if(d * d != D) continue;

        auto Y = B * x;

        cpp_int res = -1;

        if ((-Y + d) % X2 == 0) res = (-Y + d) / X2;
        if ((-Y - d) % X2 == 0) res = (-Y - d) / X2;

        if(res >= 0) {
            print(res);
            print.flush();
            return;
        }
    }
}
